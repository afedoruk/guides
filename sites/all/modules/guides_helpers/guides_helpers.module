<?php

include_once('guides_helpers.features.inc');

function guides_helpers_init()
{
	ctools_include('ajax');
	ctools_include('modal');
	ctools_modal_add_js();
	$sample_style = array(
    'ctools-sample-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 500,
        'height' => 300,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .8,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CToolsSampleModal',
	  'closeText' => t("Close"),
      'throbber' => theme('image', ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), t('Loading...'), t('Loading')),
    ),
  );
  drupal_add_js($sample_style, 'setting');
  ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
  ctools_add_css('ctools-ajax-sample', 'ctools_ajax_sample');
}

function guides_helpers_menu()
{
	$items["guides/redirect"]=array(
		"access arguments"=>array("edit own guide content"),
		"page callback"=>"guides_helpers_redirect",
		"type"=>MENU_CALLBACK
	);

	$items["guides/%ctools_js/login"]=array(
	  'title' => 'Login',
      'page callback' => 'guides_helpers_login',
      'page arguments' => array(1),
      'access callback' => "user_is_anonymous",
      'type' => MENU_CALLBACK,
	);

	 $items['guides/user-name-autocomplete'] = array(
		'page callback'    => 'guides_user_name_autocomplete',
		'access callback'  => 'privatemsg_user_access',
		'access arguments' => array('write privatemsg'),
		'type'             => MENU_CALLBACK,
		'weight'           => -10,
	  );
	return $items;
}

function guides_helpers_login($js = NULL)
{
	// Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('user_login');
  }

  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (empty($output)) {
    $output = array();
	$output[]=ctools_ajax_command_reload();
  }
  ctools_ajax_render($output);
}

function guides_helpers_rules_action_info() {
  return array(
    'guides_helpers_publish_action' => array(
      'label' => t('Publish guide card'),
      'arguments' => array(
        'user' => array('type' => 'user', 'label' => t('Current user')),
      ),
      'module' => 'User',
    )
  );
}

function guides_helpers_publish_action($user)
{
	if(isset($user->uid))
	{
		$uid=$user->uid;
	}
	else
	{
		$uid=$context['uid'];
	}

   db_query("UPDATE {node} SET status = 1 WHERE uid = %d AND type='guide'", $uid);
   watchdog('action', 'Published guide card for guide %uid', array('%uid' => $uid));
}

function guides_helpers_get_card($account=null)
{
	static $nids;
	if(!$account)
	{
		global $user;
		$account=$user;
	}
	if(!isset($nids[$account->uid]))
		$nids[$account->uid]=db_result(db_query("SELECT nid FROM {node} WHERE uid=%d AND type='guide'", $account->uid));
	else
		$nids[$account->uid]=null;
	return $nids[$account->uid];
}

function guides_helpers_redirect()
{
	if($nid=guides_helpers_get_card())
	{
		$path="node/".$nid;
	}
	else
	{
		$path=drupal_get_normal_path(variable_get('site_frontpage', 'node'));
	}
	drupal_goto($path);
}

function guides_helpers_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)
{
	if($node->type=="testimonial" && $op=="view" && $a4)
	{
		$node->guide=node_load($node->field_guide[0]["nid"]);
	}
}

function guides_helpers_form_alter(&$form, &$form_state, $form_id)
{
	if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') 
	{
		$form['body_field']['teaser_include'] = array(
	      '#type' => 'value',
		  '#value' => TRUE,
	    );
	}

	if($form_id=="guide_node_form")
	{
		$nid=guides_helpers_get_card();
		if($nid && arg(2)!="edit")
		{
			drupal_set_message("У вас уже есть карточка гида, вот она ".$nid, "error");
			drupal_goto("node/".$nid);
		}
	}
	if($form_id=="testimonial_node_form")
	{
		global $user;
		$node=node_load(arg(3));
		if($node->uid==$user->uid)
		{
			drupal_set_message("Нельзя написать отзыв о самом себе :)", "error");
			drupal_goto("node/".$node->nid);
		}
	}
	if($form_id=="privatemsg_new")
	{
		unset($form['privatemsg']['preview']);
		//print_r( $form['privatemsg']['recipient'] );
		$form['privatemsg']['recipient']['#autocomplete_path'] = 'guides/user-name-autocomplete';
		if($form['privatemsg']['recipient']['#default_value'])
		{
			$names=explode(",", $form['privatemsg']['recipient']['#default_value']);
			foreach($names as $name)
			{
				$account=user_load(array("name"=>trim($name)));
				$res=db_query("SELECT * FROM {node} n WHERE n.type='guide' AND n.status=1 AND n.uid=%d", $account->uid);
				if($row=db_fetch_object($res))
				{
					$recipients[]=$account->name;
				}
				else
				{
					$recipients[]=$row->title." (".$account->name.")";
				}
			}
			$form['privatemsg']['recipient']['#default_value']=implode(", ", $recipients);
		}
	//	array_unshift($form['privatemsg']['preview']['#validate'], 'naimi_pm_send_validate');
		array_unshift($form['privatemsg']['submit']['#validate'], 'guides_pm_send_validate');
	}
}

function guides_pm_send_validate($form, &$form_state) 
{
//	print_R($form_state);
	$names=explode(",", $form_state['values']['recipient']);

	foreach($names as $name)
	{
		if(strstr($name, "("))
		{
			preg_match("/\((.*?)\)/", $name, $matches);
	//		drupal_set_message(print_R($matches[1], 1));
	//		$account=user_load($matches[1]);
			$recipients[]=$matches[1];
		}
		else
			$recipients[]=$name;
	}
	$form_state['values']['recipient']=implode(", ", $recipients);
}

function guides_helpers_user($op, &$edit, &$account, $category = NULL)
{
	if($op=="view")
	{
		if($nid=guides_helpers_get_card($account))
		{
			$guide=node_load($nid);
			$account->content["guide"]["#value"]=node_view($guide, 1);
		}
		$res=db_query("SELECT * FROM {node} WHERE uid=%d AND status=1 AND type='testimonial' ORDER BY created DESC", $account->uid);
		while($row=db_fetch_object($res))
		{
			$testimonials[]=node_load($row->nid);
		}
		if(sizeof($testimonials))
			$account->content["testimonials"]["#value"]=theme("guides_helpers_user_testimonials", $testimonials);
	}
}

function guides_helpers_theme($existing, $type, $theme, $path) 
{
  return array(
    'guides_helpers_user_testimonials' => array(
      'arguments' => array('testimonials'=>array()),
	  'file'=>"guides_helpers.theme.inc"
    ),    
  );
}

function guides_helpers_link_alter(&$links, $node, $comment = NULL)
{
	global $user;
	if($node->uid==$user->uid)
	{
		unset($links['testimonial_field_guide']);
		unset($links['flag-bookmarks']);
		unset($links['privatemsg_guide']);
	}
//	print_r($links);
}

function guides_user_name_autocomplete($string) {
  $names = array();
  // 1: Parse $string and build list of valid user names.
  $fragments = explode(',', $string);
  foreach ($fragments as $index => $name) {
    if ($name = trim($name)) {
      $names[$name] = $name;
    }
  }
  // By using user_validate_user we can ensure that names included in $names are at least logisticaly possible.
  // 2: Find the next user name suggestion.
  $fragment = array_pop($names);
  $matches = array();
  if (!empty($fragment)) {

	$query['query']="SELECT u.uid, u.name, n.title FROM {users} u LEFT JOIN {node} n ON n.uid=u.uid WHERE (n.title LIKE '%s%%' OR u.name LIKE '%s%%') AND u.status=1 AND (n.status=1 OR n.status IS NULL) AND (n.type='guide' OR n.type IS NULL) ORDER BY u.name ASC";


    $result = db_query_range($query['query'], $fragment, $fragment, 0, 10);
    $prefix = count($names) ? implode(", ", $names) .", " : '';
    // 3: Build proper suggestions and print.
    while ($user = db_fetch_object($result)) {
		if($user->title)
		{
		     $matches[$prefix . $user->title ." (".$user->name."), "] = $user->title." (".$user->name.")";
		}
		else
		{
		     $matches[$prefix . $user->name] = $user->name;
		}
    }
  }
  // convert to object to prevent drupal bug, see http://drupal.org/node/175361
  drupal_json((object)$matches);
}